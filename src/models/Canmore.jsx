/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { shaderMaterial, useGLTF, useScroll } from "@react-three/drei";
import { extend, useFrame } from "@react-three/fiber";

const ColorShiftMaterial = shaderMaterial(
  { time: 0 },
  // vertex shader
  /*glsl*/ `
    varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
  `,
  // fragment shader
  /*glsl*/ `
    uniform float time;
    varying vec2 vUv;
    
    void main() {
      float strength = mod(vUv.y * 1.0, 1.0);
      strength = step(time, strength);
      gl_FragColor = vec4(strength, strength, strength, 1.0);
    }
  `
);

extend({ ColorShiftMaterial });

export default function Model(props) {
  const { nodes, materials } = useGLTF("/glb/canmore-compressed.glb");
  const texture = materials["rastMat.001"];
  texture.specularIntensity = 0;
  texture.envMapIntensity = 3.33;
  const sideTexture = materials["Material.001"];
  sideTexture.specularIntensity = 0;
  sideTexture.envMapIntensity = 0.5;

  const model = useRef();

  return (
    <group {...props} dispose={null}>
      <group ref={model} scale={0.0005}>
        {/* MAP */}
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.EXPORT_GOOGLE_SAT_WM001.geometry}
          material={texture}
        >
          <colorShiftMaterial time={0.33} />
        </mesh>
        {/* SIDES */}
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.EXPORT_GOOGLE_SAT_WM001_1.geometry}
          material={sideTexture}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/glb/canmore-compressed.glb");
