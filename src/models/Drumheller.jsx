/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { shaderMaterial, useGLTF } from "@react-three/drei";
import { extend } from "@react-three/fiber";

const ColorShiftMaterial = shaderMaterial(
  { time: 0 },
  // vertex shader
  /*glsl*/ `
    varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
  `,
  // fragment shader
  /*glsl*/ `
    uniform float time;
    varying vec2 vUv;
    
    void main() {
      float strength = mod(vUv.y * 1.0, 1.0);
      strength = step(time, strength);
      gl_FragColor = vec4(strength, strength, strength, 1.0);
    }
  `
);

extend({ ColorShiftMaterial });

export default function Model(props) {
  const { nodes, materials } = useGLTF("/glb/drumheller-resized.glb");

  const [timer, setTimer] = React.useState(0);

  useEffect(() => {
    if (timer > 1) setTimer(0);
    const interval = setInterval(() => {
      setTimer((timer) => timer + 0.01);
    }, 10);
    return () => clearInterval(interval);
  }, [timer]);

  return (
    <group {...props} dispose={null}>
      <mesh
        name="mesh"
        castShadow
        receiveShadow
        geometry={nodes.mesh.geometry}
        material={materials.rastMat}
        scale={0.0005}
      />
      <mesh
        name="road"
        castShadow
        receiveShadow
        geometry={nodes.road.geometry}
        material={nodes.road.material}
        position={[0, 0.7, -0.7]}
        rotation={[0, 0.9, 0]}
      >
        <colorShiftMaterial time={timer} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/glb/drumheller-resized.glb");
