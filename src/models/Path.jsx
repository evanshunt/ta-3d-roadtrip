/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { extend } from "@react-three/fiber";
import { shaderMaterial, useGLTF } from "@react-three/drei";
import { useControls } from "leva";

const FillMaterial = shaderMaterial(
  { time: 0 },

  /*glsl*/ `
    varying vec2 vUv;
    varying vec3 vNormal;

    void main() {
      vUv = uv;
      vNormal = normal;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
  `,
  // fragment shader
  /*glsl*/ `
    uniform float time;
    varying vec2 vUv;
    varying vec3 vNormal;
    
    void main() {
      vec2 st = gl_FragCoord.xy/vUv.xy;
//gl_FragCoord

      // float strength = mod(vUv.x * 1.0, 1.0);
      float strength = mod(1.0 - vUv.x * 1.0, 1.0);
      strength = step(time, strength);  
      // strength *= strength * time;   
      
      gl_FragColor = vec4(strength, 0.0, 0.0, 1.0);
      
    }
  `
);

extend({ FillMaterial });

export function Path(props) {
  const { time } = useControls({
    time: {
      min: 0,
      max: 1,
      value: 0.5,
      step: 0.001,
    },
  });

  const { nodes, materials } = useGLTF("/glb/path-straightenedg-aligned.glb");
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane.geometry}
        material={nodes.Plane.material}
        position={[0, 0, 0]}
        scale={1}
      >
        <fillMaterial time={time} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/glb/path-straightenedg-aligned.glb");

export default Path;
